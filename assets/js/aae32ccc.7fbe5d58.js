"use strict";(self.webpackChunkflamework=self.webpackChunkflamework||[]).push([[8451],{4641:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>g,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var o=t(5893),i=t(1151);const r={title:"Singletons"},s=void 0,a={id:"modding/guides/singletons",title:"Singletons",description:"This guide is for creating a custom singleton.",source:"@site/docs/modding/guides/singletons.md",sourceDirName:"modding/guides",slug:"/modding/guides/singletons",permalink:"/docs/modding/guides/singletons",draft:!1,unlisted:!1,editUrl:"https://github.com/rbxts-flamework/documentation/tree/master/docs/modding/guides/singletons.md",tags:[],version:"current",frontMatter:{title:"Singletons"},sidebar:"flamework",previous:{title:"Decorators",permalink:"/docs/modding/guides/decorators"},next:{title:"Dependency Resolution",permalink:"/docs/modding/guides/dependency-resolution"}},d={},l=[{value:"Defining the singleton decorator",id:"defining-the-singleton-decorator",level:2},{value:"Using the singletons",id:"using-the-singletons",level:2},{value:"Ensuring the singletons always load",id:"ensuring-the-singletons-always-load",level:2},{value:"Specifying your singleton load order",id:"specifying-your-singleton-load-order",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"This guide is for creating a custom singleton."}),"\n",(0,o.jsxs)(n.p,{children:["You should see the ",(0,o.jsx)(n.a,{href:"./decorators",children:"custom decorator guide"})," and the ",(0,o.jsx)(n.a,{href:"./dependency-resolution",children:"dependency resolution guide"})," for additional information."]}),"\n",(0,o.jsx)(n.h2,{id:"defining-the-singleton-decorator",children:"Defining the singleton decorator"}),"\n",(0,o.jsx)(n.p,{children:"You need to define the decorator you will use for your singleton. This is identical to defining any other decorator and you can choose between a meta decorator or normal decorator."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'/**\n * Request the required metadata for lifecycle events and dependency resolution.\n * @metadata flamework:implements flamework:parameters\n */\nexport const Singleton = Modding.createMetaDecorator("Class");\n'})}),"\n",(0,o.jsx)(n.h2,{id:"using-the-singletons",children:"Using the singletons"}),"\n",(0,o.jsx)(n.p,{children:"Flamework will automatically create and manage singletons whenever they're used for dependency injection. You simply need to use your singleton (via the Dependency macro or constructor DI) and Flamework will instantiate it."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"@Singleton()\nclass MySingleton {}\n\nconst mySingleton = Dependency<MySingleton>();\n"})}),"\n",(0,o.jsx)(n.h2,{id:"ensuring-the-singletons-always-load",children:"Ensuring the singletons always load"}),"\n",(0,o.jsxs)(n.p,{children:["Flamework will only create and manage singletons ",(0,o.jsx)(n.em,{children:"if"})," they're requested, however, this may not be ideal as your singleton might not be explicitly used anywhere."]}),"\n",(0,o.jsxs)(n.p,{children:["If you want your singletons to always be created, you can use the ",(0,o.jsx)(n.code,{children:"flamework:singleton"})," metadata to tell Flamework to load it automatically. You can define this inside of your Flamework decorator."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'/**\n * Request the required metadata for lifecycle events and dependency resolution.\n * @metadata flamework:implements flamework:parameters\n */\nexport const Singleton = Modding.createDecorator("Class", (descriptor) => {\n\tReflect.defineMetadata(descriptor.object, "flamework:singleton", true);\n});\n'})}),"\n",(0,o.jsx)(n.h2,{id:"specifying-your-singleton-load-order",children:"Specifying your singleton load order"}),"\n",(0,o.jsxs)(n.p,{children:["Whilst it is ",(0,o.jsx)(n.a,{href:"/docs/guides/creating-a-singleton#load-order",children:"not recommended"}),", you can specify a custom load order using the ",(0,o.jsx)(n.code,{children:"flamework:loadOrder"})," metadata."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'interface SingletonConfig {\n\tloadOrder?: number;\n}\n\n/**\n * Request the required metadata for lifecycle events and dependency resolution.\n * @metadata flamework:implements flamework:parameters\n */\nexport const Singleton = Modding.createDecorator<[SingletonConfig]>("Class", (descriptor, [config]) => {\n\tReflect.defineMetadata(descriptor.object, "flamework:singleton", true);\n\tReflect.defineMetadata(descriptor.object, "flamework:loadOrder", config.loadOrder);\n});\n'})})]})}function g(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>s});var o=t(7294);const i={},r=o.createContext(i);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);