"use strict";(self.webpackChunkflamework=self.webpackChunkflamework||[]).push([[3426],{7:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>m});var t=o(5893),s=o(1151);const i={title:"Scripting API"},a=void 0,c={id:"additional-modules/components/scripting-api",title:"Scripting API",description:"Flamework exposes a Components singleton which can be used on both server and client. Inside, there are several methods that allow you to interface with Flamework's components. You can grab a reference to this singleton the same way as you do any others, as documented.",source:"@site/docs/additional-modules/components/scripting-api.md",sourceDirName:"additional-modules/components",slug:"/additional-modules/components/scripting-api",permalink:"/docs/additional-modules/components/scripting-api",draft:!1,unlisted:!1,editUrl:"https://github.com/rbxts-flamework/documentation/tree/master/docs/additional-modules/components/scripting-api.md",tags:[],version:"current",frontMatter:{title:"Scripting API"},sidebar:"flamework",previous:{title:"Creating a Component",permalink:"/docs/additional-modules/components/creating-a-component"},next:{title:"Attributes",permalink:"/docs/additional-modules/components/attributes"}},r={},m=[{value:"Retrieving a component",id:"retrieving-a-component",level:2},{value:"Adding/removing a component",id:"addingremoving-a-component",level:2},{value:"Polymorphic APIs",id:"polymorphic-apis",level:2}];function p(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Flamework exposes a Components singleton which can be used on both server and client. Inside, there are several methods that allow you to interface with Flamework's components. You can grab a reference to this singleton the same way as you do any others, ",(0,t.jsx)(n.a,{href:"/docs/guides/dependencies",children:"as documented"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"retrieving-a-component",children:"Retrieving a component"}),"\n",(0,t.jsxs)(n.p,{children:["If you'd like to retrieve the component attached to a specific instance, you can use ",(0,t.jsx)(n.code,{children:"Components.getComponent<T>(instance)"})]}),"\n",(0,t.jsxs)(n.p,{children:["There is additionally ",(0,t.jsx)(n.code,{children:"Components.waitForComponent<T>(instance)"})," whenever you want to wait for a component to be added to the specific instance.\nThis returns a promise that can be cancelled to clear up resources if necessary."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Components } from "@flamework/components";\n\nconst components = Dependency<Components>();\nconst myComponent = components.getComponent<MyComponent>(game);\nif (myComponent) {\n\tmyComponent.method();\n}\n\ncomponents.waitForComponent<MyComponent>(game).then((myComponent) => {\n\tmyComponent.method();\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"addingremoving-a-component",children:"Adding/removing a component"}),"\n",(0,t.jsxs)(n.p,{children:["Similarly, if you'd like to add a component to a specific instance, you can use ",(0,t.jsx)(n.code,{children:"Components.addComponent<T>(instance)"})]}),"\n",(0,t.jsxs)(n.p,{children:["If you'd like to remove a component, you can use ",(0,t.jsx)(n.code,{children:"Components.removeComponent<T>(instance)"})]}),"\n",(0,t.jsxs)(n.p,{children:["Disclaimer: Components added via the scripting API do not get removed automatically. It is recommended that you use the ",(0,t.jsx)(n.code,{children:"tag"})," config option which will automatically create and cleanup components, and also supports StreamingEnabled on the client."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Components } from "@flamework/components";\n\nconst components = Dependency<Components>();\ncomponents.addComponent<MyComponent>(game);\ncomponents.removeComponent<MyComponent>(game);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"polymorphic-apis",children:"Polymorphic APIs"}),"\n",(0,t.jsxs)(n.p,{children:["Sometimes, you might want components to support generic features like ",(0,t.jsx)(n.code,{children:"OnInteract"}),", or ",(0,t.jsx)(n.code,{children:"BaseEnemy"}),", however the ",(0,t.jsx)(n.code,{children:"getComponent"})," API will only fetch exact components."]}),"\n",(0,t.jsxs)(n.p,{children:["Flamework exposes two APIs to support this behavior, ",(0,t.jsx)(n.code,{children:"Components.getComponents<T>(instance)"})," and ",(0,t.jsx)(n.code,{children:"Components.getAllComponents<T>(instance)"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const components = Dependency<Components>();\n\n// A hypothetical OnInteract interface, similar to a lifecycle event.\nprint("interactable components:", components.getComponents<OnInteract>(Workspace.MyInteractableItem));\n\n// Getting all components that extend a BaseEnemy class.\nprint("enemies:", components.getAllComponents<BaseEnemy>());\n'})})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},1151:(e,n,o)=>{o.d(n,{Z:()=>c,a:()=>a});var t=o(7294);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);