"use strict";(self.webpackChunkflamework=self.webpackChunkflamework||[]).push([[3663],{9941:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>d,toc:()=>a});var t=s(5893),i=s(1151);const r={title:"Listeners"},o=void 0,d={id:"modding/guides/listeners",title:"Listeners",description:"A listener is an instance of a class which can be registered to receive lifecycle events or decorator behavior.",source:"@site/docs/modding/guides/listeners.md",sourceDirName:"modding/guides",slug:"/modding/guides/listeners",permalink:"/docs/modding/guides/listeners",draft:!1,unlisted:!1,editUrl:"https://github.com/rbxts-flamework/documentation/docs/modding/guides/listeners.md",tags:[],version:"current",frontMatter:{title:"Listeners"},sidebar:"flamework",previous:{title:"Reflection",permalink:"/docs/modding/reflection"},next:{title:"Lifecycle Events",permalink:"/docs/modding/guides/lifecycle-events"}},l={},a=[{value:"Adding a listener",id:"adding-a-listener",level:2},{value:"Removing a listener",id:"removing-a-listener",level:2},{value:"Listener added/removed",id:"listener-addedremoved",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"A listener is an instance of a class which can be registered to receive lifecycle events or decorator behavior."}),"\n",(0,t.jsxs)(n.p,{children:["You can also turn arbitrary objects into listeners as long as you supply the necessary reflection metadata for lifecycle events/decorators (",(0,t.jsx)(n.code,{children:"flamework:implements"})," and ",(0,t.jsx)(n.code,{children:"flamework:decorators"}),") respectively but it is easiest to use classes and let Flamework do this automatically."]}),"\n",(0,t.jsx)(n.h2,{id:"adding-a-listener",children:"Adding a listener"}),"\n",(0,t.jsxs)(n.p,{children:["You can use the ",(0,t.jsx)(n.code,{children:"Modding.addListener"})," API to create a listener. Flamework will automatically fire relevant events (e.g onListenerAdded) based on the ",(0,t.jsx)(n.code,{children:"flamework:implements"})," metadata as well the ",(0,t.jsx)(n.code,{children:"flamework:decorators"})," metadata."]}),"\n",(0,t.jsxs)(n.p,{children:["Flamework automatically adds all singletons, components or custom classes (when using ",(0,t.jsx)(n.a,{href:"./dependency-resolution",children:(0,t.jsx)(n.code,{children:"Modding.createDependency"})}),") as listeners."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"@Decorator()\nclass A implements LifecycleEvent {}\n\nModding.addListener(new A());\n"})}),"\n",(0,t.jsx)(n.h2,{id:"removing-a-listener",children:"Removing a listener"}),"\n",(0,t.jsxs)(n.p,{children:["You can use the ",(0,t.jsx)(n.code,{children:"Modding.removeListener"})," API to remove a listener. Flamework will automatically fire relevant events (e.g onListenerRemoved) based on the ",(0,t.jsx)(n.code,{children:"flamework:implements"})," metadata as well the ",(0,t.jsx)(n.code,{children:"flamework:decorators"})," metadata."]}),"\n",(0,t.jsx)(n.p,{children:"Lifecycle events will no longer fire once the object is removed as a listener."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"@Decorator()\nclass A implements LifecycleEvent {}\n\nconst obj = new A();\nModding.addListener(obj);\n// some time later\nModding.removeListener(obj);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"listener-addedremoved",children:"Listener added/removed"}),"\n",(0,t.jsxs)(n.p,{children:["Flamework exposes an ",(0,t.jsx)(n.code,{children:"onListenerAdded"})," event as well as an ",(0,t.jsx)(n.code,{children:"onListenerRemoved"}),". These events can be fired for any listener or you can specify a specific ID to listen for (Flamework only fires these events for decorator/lifecycle event IDs.)"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'// Fires when any listener is added.\nModding.onListenerAdded((obj) => {\n\tprint("new listener!", obj);\n})\n\n// Fires when any listener is removed.\nModding.onListenerRemoved((obj) => {\n\tprint("listener was removed!", obj);\n})\n\n// Fires whenever a listener subscribed to the MyLifecycle lifecycle event was added.\nModding.onListenerAdded<MyLifecycle>((obj) => {\n\tprint("new listener for MyLifecycle!", obj);\n\tobj.myLifecycle();\n})\n\n// Fires whenever a listener subscribed to the MyLifecycle lifecycle event was removed.\nModding.onListenerRemoved<MyLifecycle>((obj) => {\n\tprint("listener for MyLifecycle was removed!", obj);\n})\n'})})]})}function m(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>d,a:()=>o});var t=s(7294);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);