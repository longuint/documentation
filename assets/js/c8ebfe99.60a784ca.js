"use strict";(self.webpackChunkflamework=self.webpackChunkflamework||[]).push([[8221],{4447:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var s=t(5893),r=t(1151);const a={title:"Flamework v1.0.0-beta.20",authors:"fireboltofdeath",tags:["Release"]},o=void 0,i={permalink:"/blog/2023/04/13/flamework-release",editUrl:"https://github.com/rbxts-flamework/documentation/tree/master/blog/2023-04-13-flamework-release.md",source:"@site/blog/2023-04-13-flamework-release.md",title:"Flamework v1.0.0-beta.20",description:"Change Log",date:"2023-04-13T00:00:00.000Z",formattedDate:"April 13, 2023",tags:[{label:"Release",permalink:"/blog/tags/release"}],readingTime:3.53,hasTruncateMarker:!0,authors:[{name:"fireboltofdeath",title:"Maintainer",url:"https://github.com/Fireboltofdeath",imageURL:"https://avatars.githubusercontent.com/u/24422634?v=4",key:"fireboltofdeath"}],frontMatter:{title:"Flamework v1.0.0-beta.20",authors:"fireboltofdeath",tags:["Release"]},unlisted:!1,prevItem:{title:"Flamework v1.0.0-beta.23",permalink:"/blog/2023/08/13/flamework-release"},nextItem:{title:"December 19th Release",permalink:"/blog/2022/12/19/flamework-release"}},l={authorsImageUrls:[void 0]},c=[{value:"Change Log",id:"change-log",level:2},{value:"Transformer",id:"transformer",level:3},{value:"Core",id:"core",level:3},{value:"Components",id:"components",level:3},{value:"Networking",id:"networking",level:3},{value:"Changes",id:"changes",level:2},{value:"Advanced User Macros",id:"advanced-user-macros",level:3},{value:"Literals",id:"literals",level:4},{value:"De-unification",id:"de-unification",level:4},{value:"Utility types",id:"utility-types",level:4},{value:"Inspect",id:"inspect",level:4},{value:"Previous Release",id:"previous-release",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"change-log",children:"Change Log"}),"\n",(0,s.jsx)(n.p,{children:"Flamework will begin releasing packages with matching versions.\nYou should use the same version for every Flamework package."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/rbxts-flamework/core/commits/master",children:"@flamework/core"}),"\n",(0,s.jsx)(n.a,{href:"https://github.com/rbxts-flamework/components/commits/master",children:"@flamework/components"}),"\n",(0,s.jsx)(n.a,{href:"https://github.com/rbxts-flamework/networking/commits/master",children:"@flamework/networking"}),"\n",(0,s.jsx)(n.a,{href:"https://github.com/rbxts-flamework/transformer/commits/master",children:"rbxts-transformer-flamework"})]}),"\n",(0,s.jsx)("span",{style:{color:"crimson"},children:"This release contains breaking changes."}),"\n",(0,s.jsx)(n.h3,{id:"transformer",children:"Transformer"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"TypeScript is now a peer dependency."}),"\n",(0,s.jsx)(n.li,{children:"Flamework will user the correct parameter length for user macros where it previously didn't (such as tuple rest parameters.)"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"delete"})," expressions will now work on component attributes."]}),"\n",(0,s.jsxs)(n.li,{children:["Improved union simplification for literal guard generation.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["All ",(0,s.jsx)(n.code,{children:"literal"})," guards will combine to a single guard, e.g ",(0,s.jsx)(n.code,{children:"1 | 2"})," will no longer become ",(0,s.jsx)(n.code,{children:"t.union(t.literal(1), t.literal(2))"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"core",children:"Core"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Added a ",(0,s.jsx)(n.code,{children:"profiling"})," option to ",(0,s.jsx)(n.code,{children:"flamework.json"})," to enable memory categories and microprofiler labels."]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#advanced-user-macros",children:"Advanced user macros"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"components",children:"Components"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Added doc comments to all component methods, also removed unnecessary overloads."}),"\n",(0,s.jsxs)(n.li,{children:["Added ",(0,s.jsx)(n.code,{children:"waitForComponent"})," API to wait until a component is added to a specific instance."]}),"\n",(0,s.jsxs)(n.li,{children:["Components will now warn whenever a component could not be created for 5+ seconds.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["You can define ",(0,s.jsx)(n.code,{children:"warningTimeout"})," in your component settings to override the time, set to 0 to disable."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Added the ability to whitelist/blacklist specific ancestors.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["These can be specified using ",(0,s.jsx)(n.code,{children:"ancestorWhitelist"})," and ",(0,s.jsx)(n.code,{children:"ancestorBlacklist"})," in your component settings."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)("span",{style:{color:"crimson"},children:"[BREAKING]"})," Defaults to ",(0,s.jsx)(n.code,{children:"ancestorBlacklist: [ServerStorage, ReplicatedStorage]"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)("span",{style:{color:"crimson"},children:"[BREAKING]"})," This does not update when components are reparented."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"networking",children:"Networking"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Fixed an error whenever ",(0,s.jsx)(n.code,{children:"NaN"})," was sent as an ID."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"changes",children:"Changes"}),"\n",(0,s.jsx)(n.h3,{id:"advanced-user-macros",children:"Advanced User Macros"}),"\n",(0,s.jsx)(n.p,{children:"Flamework now supports much more complex queries using user macros.\nThe new user macros give you the ability to create arbitrary queries based on inputted objects and arrays."}),"\n",(0,s.jsx)(n.p,{children:"You can use any TypeScript syntax (mapped types, unions, conditional types, literals, etc) and Flamework will automatically\ngenerate that object for you."}),"\n",(0,s.jsxs)(n.p,{children:["To use this new system, you must use the ",(0,s.jsx)(n.code,{children:"Modding.Many"})," type."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'/** @metadata macro */\nfunction macro<T>(metadata?: Modding.Many<{ [k in keyof T]: Modding.Generic<T[k], "guard"> }>) {\n\tassert(metadata);\n}\n\n// This will generate a new object with the same keys as T, but containing the guard for each element.\nmacro<{ a: string, b: number }>();\n'})}),"\n",(0,s.jsx)(n.h4,{id:"literals",children:"Literals"}),"\n",(0,s.jsx)(n.p,{children:"Flamework supports generating literal values (numbers, strings, undefined, etc) which can be used to represent complex types, such as conditionals."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'interface MacroMetadata<T> {\n\tisString: T extends string ? true : false;\n\ttaggedConditional: T extends number\n\t\t? ["number", { value: T }]\n\t\t: ["unknown", { guard: Modding.Generic<T, "guard"> }];\n\n\taString: T extends string ? `T is: ${T}` : `T is not a string`;\n\taNumber: T extends number ? T : -1;\n\taBoolean: T extends boolean ? T : false;\n\tmaybeNothing: T extends string | number | boolean ? T : undefined;\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"de-unification",children:"De-unification"}),"\n",(0,s.jsx)(n.p,{children:"Flamework allows you to convert unions to an array of all constituents.\nYou can do this simply by wrapping your union in an array."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"function macro<T>(metadata?: Modding.Many<(keyof T)[]>): void;\n// OR\nfunction macro<T>(metadata?: Modding.Many<Array<keyof T>>): void;\n"})}),"\n",(0,s.jsx)(n.h4,{id:"utility-types",children:"Utility types"}),"\n",(0,s.jsx)(n.p,{children:"Flamework also exposes several more types that user macros can use to leverage certain features of Flamework."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'interface MacroMetadata<S extends string, T extends unknown[]> {\n\thash: Modding.Hash<S, "optional context">,\n\n\t// Same as `Modding.Hash`, except it is disabled when Flamework obfuscation is off.\n\tobfuscated: Modding.Obfuscate<S, "optional context">,\n\n\t// Fetches the labels from the tuple.\n\t// This can also be used to fetch parameter names from `Parameters<T>`\n\tlabels: Modding.TupleLabels<T>.\n}\n\nfunction macro<S extends string, T extends unknown[]>(metadata?: Modding.Many<MacroMetadata<S, T>>): void;\n'})}),"\n",(0,s.jsx)(n.h4,{id:"inspect",children:"Inspect"}),"\n",(0,s.jsx)(n.p,{children:"There may be cases where you'd want to utilize some of Flamework's user macros features in plain code.\nFor example, you might want to retrieve every key from a type, or generate a guard for every member of a type."}),"\n",(0,s.jsxs)(n.p,{children:["Flamework provides the ",(0,s.jsx)(n.code,{children:"Modding.inspect<T>()"})," macro which runs ",(0,s.jsx)(n.code,{children:"T"})," through Flamework's user macro system."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'type MyConstant = typeof myConstant;\nconst myConstant = {\n\ta: { value: "default" },\n\tb: { value: 15 },\n} as const;\n\nconst constantMetadata = Modding.inspect<{\n\tkeys: (keyof MyConstant)[],\n\tguards: {\n\t\t[k in keyof MyConstant]: Modding.Generic<MyConstant[k]["value"], "guard">\n\t},\n}>();\n'})}),"\n",(0,s.jsx)(n.h2,{id:"previous-release",children:"Previous Release"}),"\n",(0,s.jsx)(n.p,{children:"As of this release, Flamework will begin releasing all Flamework updates with matching versions.\nThese are the previous versions that you can revert to if you have any issues."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"@flamework/core: 1.0.0-beta.8\n@flamework/networking: 1.0.0-beta.9\n@flamework/components: 1.0.0-beta.12\nrbxts-transformer-flamework: 1.0.0-beta.15\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>o});var s=t(7294);const r={},a=s.createContext(r);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);