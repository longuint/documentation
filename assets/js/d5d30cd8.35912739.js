"use strict";(self.webpackChunkflamework=self.webpackChunkflamework||[]).push([[5366],{8558:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var r=a(5893),n=a(1151);const o={title:"Reflection"},l=void 0,i={id:"modding/reflection",title:"Reflection",description:"Flamework comes with a reflection library which is where all generated metadata is stored.",source:"@site/docs/modding/reflection.md",sourceDirName:"modding",slug:"/modding/reflection",permalink:"/docs/modding/reflection",draft:!1,unlisted:!1,editUrl:"https://github.com/rbxts-flamework/documentation/docs/modding/reflection.md",tags:[],version:"current",frontMatter:{title:"Reflection"},sidebar:"flamework",previous:{title:"Metadata",permalink:"/docs/modding/metadata"},next:{title:"Listeners",permalink:"/docs/modding/guides/listeners"}},s={},d=[{value:"General API",id:"general-api",level:2},{value:"Flamework API",id:"flamework-api",level:2},{value:"Reflect.getProperties / Reflect.getOwnProperties",id:"reflectgetproperties--reflectgetownproperties",level:3},{value:"<code>identifier</code>",id:"identifier",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,n.a)(),...e.components},{Details:a}=t;return a||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"Flamework comes with a reflection library which is where all generated metadata is stored."}),"\n",(0,r.jsx)(t.h2,{id:"general-api",children:"General API"}),"\n",(0,r.jsxs)(t.p,{children:["Flamework follows ",(0,r.jsx)(t.a,{href:"https://rbuckton.github.io/reflect-metadata/",children:"this proposal"})," for its design."]}),"\n",(0,r.jsxs)(a,{children:[(0,r.jsx)("summary",{children:"API"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"// define metadata on an object or property\nReflect.defineMetadata(metadataKey, metadataValue, target);\nReflect.defineMetadata(metadataKey, metadataValue, target, propertyKey);\n\n// check for presence of a metadata key on the prototype chain of an object or property\nlet result = Reflect.hasMetadata(metadataKey, target);\nlet result = Reflect.hasMetadata(metadataKey, target, propertyKey);\n\n// check for presence of an own metadata key of an object or property\nlet result = Reflect.hasOwnMetadata(metadataKey, target);\nlet result = Reflect.hasOwnMetadata(metadataKey, target, propertyKey);\n\n// get metadata value of a metadata key on the prototype chain of an object or property\nlet result = Reflect.getMetadata(metadataKey, target);\nlet result = Reflect.getMetadata(metadataKey, target, propertyKey);\n\n// get metadata value of an own metadata key of an object or property\nlet result = Reflect.getOwnMetadata(metadataKey, target);\nlet result = Reflect.getOwnMetadata(metadataKey, target, propertyKey);\n\n// get all metadata keys on the prototype chain of an object or property\nlet result = Reflect.getMetadataKeys(target);\nlet result = Reflect.getMetadataKeys(target, propertyKey);\n\n// get all own metadata keys of an object or property\nlet result = Reflect.getOwnMetadataKeys(target);\nlet result = Reflect.getOwnMetadataKeys(target, propertyKey);\n\n// delete metadata from an object or property\nlet result = Reflect.deleteMetadata(metadataKey, target);\nlet result = Reflect.deleteMetadata(metadataKey, target, propertyKey);\n"})})]}),"\n",(0,r.jsx)(t.h2,{id:"flamework-api",children:"Flamework API"}),"\n",(0,r.jsx)(t.p,{children:"This is the flamework specific APIs added to the reflection library."}),"\n",(0,r.jsx)(t.h3,{id:"reflectgetproperties--reflectgetownproperties",children:"Reflect.getProperties / Reflect.getOwnProperties"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"function Reflect.getProperties(obj: object): string[]\n"})}),"\n",(0,r.jsx)(t.p,{children:"This function gets the name of every property which has metadata attached."}),"\n",(0,r.jsx)(t.h2,{id:"identifier",children:(0,r.jsx)(t.code,{children:"identifier"})}),"\n",(0,r.jsxs)(t.p,{children:["The Reflect library treats ",(0,r.jsx)(t.code,{children:"identifier"})," differently from other metadata. It populates some lookup maps, such as ",(0,r.jsx)(t.code,{children:"Modding.getObjectFromId"}),", and also guarantees uniqueness. You should not assign this manually as Flamework will assign it automatically."]})]})}function p(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1151:(e,t,a)=>{a.d(t,{Z:()=>i,a:()=>l});var r=a(7294);const n={},o=r.createContext(n);function l(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);