"use strict";(self.webpackChunkflamework=self.webpackChunkflamework||[]).push([[154],{4634:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var t=o(5893),r=o(1151);const s={title:"Migration"},i="Migrating to 1.0.0",d={id:"migration",title:"Migration",description:"This document summarizes some breaking changes that were made during the Flamework 1.0 release.",source:"@site/docs/migration.md",sourceDirName:".",slug:"/migration",permalink:"/docs/migration",draft:!1,unlisted:!1,editUrl:"https://github.com/rbxts-flamework/documentation/tree/master/docs/migration.md",tags:[],version:"current",frontMatter:{title:"Migration"}},a={},l=[{value:"Core",id:"core",level:2},{value:"Glob <code>addPaths</code> has been replaced with <code>addPathsGlob</code>",id:"glob-addpaths-has-been-replaced-with-addpathsglob",level:3},{value:"Networking",id:"networking",level:2},{value:"Revised networking setup",id:"revised-networking-setup",level:3},{value:"Networking failure events are now under <code>GlobalEvents</code>",id:"networking-failure-events-are-now-under-globalevents",level:3},{value:"Components",id:"components",level:2},{value:"Component maids were removed",id:"component-maids-were-removed",level:3},{value:"Modding",id:"modding",level:2},{value:"<code>Modding.Generic</code> and <code>Modding.Caller</code> can only emit a single type of metadata",id:"moddinggeneric-and-moddingcaller-can-only-emit-a-single-type-of-metadata",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"migrating-to-100",children:"Migrating to 1.0.0"}),"\n",(0,t.jsx)(n.p,{children:"This document summarizes some breaking changes that were made during the Flamework 1.0 release."}),"\n",(0,t.jsxs)(n.p,{children:["This document will only detail larger breaking changes, it is still recommended that you read the full ",(0,t.jsx)(n.a,{href:"/blog/2023/12/18/flamework-release",children:"release notes"})," before migrating."]}),"\n",(0,t.jsxs)(n.p,{children:["If you do not have an existing codebase, please refer to ",(0,t.jsx)(n.a,{href:"/docs/installation",children:"the installation guide"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"core",children:"Core"}),"\n",(0,t.jsxs)(n.p,{children:["These are migration steps for ",(0,t.jsx)(n.code,{children:"@flamework/core"})]}),"\n",(0,t.jsxs)(n.h3,{id:"glob-addpaths-has-been-replaced-with-addpathsglob",children:["Glob ",(0,t.jsx)(n.code,{children:"addPaths"})," has been replaced with ",(0,t.jsx)(n.code,{children:"addPathsGlob"})]}),"\n",(0,t.jsxs)(n.p,{children:["Previously, you could use globs under the ",(0,t.jsx)(n.code,{children:"addPaths"})," function and it'd match all directories that matched the given glob.\nYou must now use ",(0,t.jsx)(n.code,{children:"addPathsGlob"})," which will run the path directly through the glob."]}),"\n",(0,t.jsxs)(n.p,{children:["Flamework now matches files by default, and you must specify directory matching in the glob (using a trailing ",(0,t.jsx)(n.code,{children:"/"}),").\nThis means if you used the glob ",(0,t.jsx)(n.code,{children:"src/*/server"}),", you must now use ",(0,t.jsx)(n.code,{children:"src/*/server/"})," to match only directories."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Replace ",(0,t.jsx)(n.code,{children:'addPaths({ glob: "file" }, "path")'})," with ",(0,t.jsx)(n.code,{children:'addPathsGlob("path")'})]}),"\n",(0,t.jsxs)(n.li,{children:["Replace ",(0,t.jsx)(n.code,{children:'addPaths("path")'})," or ",(0,t.jsx)(n.code,{children:'addPaths({ glob: "directory" }, "path")'})," with ",(0,t.jsx)(n.code,{children:'addPathsGlob("path/")'})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"networking",children:"Networking"}),"\n",(0,t.jsxs)(n.p,{children:["These are migration steps for ",(0,t.jsx)(n.code,{children:"@flamework/networking"})]}),"\n",(0,t.jsx)(n.h3,{id:"revised-networking-setup",children:"Revised networking setup"}),"\n",(0,t.jsx)(n.p,{children:"Flamework no longer specifies configuration in the shared networking file, and you must now configure networking on the server and client individually."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Replace ",(0,t.jsx)(n.code,{children:"GlobalEvents.server"})," and ",(0,t.jsx)(n.code,{children:"GlobalEvents.client"})," with ",(0,t.jsx)(n.code,{children:"GlobalEvents.createServer({})"})," and ",(0,t.jsx)(n.code,{children:"GlobalEvents.createClient({})"})," respectively."]}),"\n",(0,t.jsxs)(n.li,{children:["You must move your config from ",(0,t.jsx)(n.code,{children:"shared/networking.ts"})," to ",(0,t.jsx)(n.code,{children:"server/networking.ts"})," and ",(0,t.jsx)(n.code,{children:"client/networking.ts"})," (or your respective files)."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// `createEvent`/`createFunction` no longer accepts configuration.\nconst GlobalEvents = Networking.createEvent<Server, Client>();\n\nconst Events = GlobalEvents.createServer({ /* server config */ })\nconst Events = GlobalEvents.createClient({ /* client config */ })\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"networking-failure-events-are-now-under-globalevents",children:["Networking failure events are now under ",(0,t.jsx)(n.code,{children:"GlobalEvents"})]}),"\n",(0,t.jsxs)(n.p,{children:["These were previously exposed under the ",(0,t.jsx)(n.code,{children:"Networking"})," namespace, but they are now under the individual ",(0,t.jsx)(n.code,{children:"GlobalEvents"})," API."]}),"\n",(0,t.jsxs)(n.p,{children:["These updated events also pass an object containing the event information as opposed to multiple arguments.\nRefer to the ",(0,t.jsx)(n.a,{href:"/docs/additional-modules/networking/global-handlers",children:"documentation"})," for additional information."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Replace ",(0,t.jsx)(n.code,{children:'Networking.registerNetworkHandler("name", callback)'})," with ",(0,t.jsx)(n.code,{children:'GlobalEvents.registerHandler("name", callback)'})]}),"\n",(0,t.jsx)(n.li,{children:"The handlers now only pass 2 parameters: the player and the specific event's information object"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'// `createEvent`/`createFunction` no longer accepts configuration.\nconst GlobalEvents = Networking.createEvent<Server, Client>();\n\nGlobalEvents.registerHandler("onBadRequest", (player) => print(player, "sent a bad request!"));\nGlobalEvents.registerHandler("onBadResponse", (player) => print(player, "returned a bad response!"));\n'})}),"\n",(0,t.jsx)(n.h2,{id:"components",children:"Components"}),"\n",(0,t.jsxs)(n.p,{children:["These are migration steps for ",(0,t.jsx)(n.code,{children:"@flamework/components"})]}),"\n",(0,t.jsx)(n.h3,{id:"component-maids-were-removed",children:"Component maids were removed"}),"\n",(0,t.jsx)(n.p,{children:"Components no longer include a maid by default."}),"\n",(0,t.jsxs)(n.p,{children:["If you'd like to replace the previous behavior, you can create a new ",(0,t.jsx)(n.code,{children:"DisposableComponent"})," and use that for components instead of ",(0,t.jsx)(n.code,{children:"BaseComponent"}),".\nYou can replace maid with the cleanup solution of your choosing."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"export class DisposableComponent<A = {}, I extends Instance = Instance> extends BaseComponent<A, I> {\n\tprotected maid = new Maid();\n\n\toverride destroy() {\n\t\tthis.maid.Destroy();\n\n\t\t// You must still call BaseComponent's destructor!\n\t\tsuper.destroy();\n\t}\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"modding",children:"Modding"}),"\n",(0,t.jsxs)(n.p,{children:["These are migration steps for the ",(0,t.jsx)(n.code,{children:"@flamework/core"})," modding API."]}),"\n",(0,t.jsxs)(n.h3,{id:"moddinggeneric-and-moddingcaller-can-only-emit-a-single-type-of-metadata",children:[(0,t.jsx)(n.code,{children:"Modding.Generic"})," and ",(0,t.jsx)(n.code,{children:"Modding.Caller"})," can only emit a single type of metadata"]}),"\n",(0,t.jsxs)(n.p,{children:["These APIs now only generate a single type of metadata (e.g ",(0,t.jsx)(n.code,{children:'Modding.Generic<T, "guard">'})," will now compile directly to ",(0,t.jsx)(n.code,{children:"t.string"})," instead of an object)."]}),"\n",(0,t.jsx)(n.p,{children:"Flamework exposes backwards compatible APIs, but you should consider using the new APIs when possible."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Replace any existing usages with the backwards compatible ",(0,t.jsx)(n.code,{children:"Modding.GenericMany"})," or ",(0,t.jsx)(n.code,{children:"Modding.CallerMany"})," APIs."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,o)=>{o.d(n,{Z:()=>d,a:()=>i});var t=o(7294);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);